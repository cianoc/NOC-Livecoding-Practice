; /**
;  * Acceleration with Vectors 
;  * by Daniel Shiffman.  
;  * 
;  * Demonstration of the basics of motion with vector.
;  * A "Mover" object stores location, velocity, and acceleration as vectors
;  * The motion is controlled by affecting the acceleration (in this case towards the mouse)
;  */
;; Ported to Extempore by Jason Levine
;; setup window dims

(bind-val width float 400.)
(bind-val height float 800.)

(sys:load "The-Nature-of-Livecoding/processing.xtm")
(sys:load "libs/external/sndfile.xtm")
(sys:load "libs/external/audio_dsp_ext.xtm")

(bind-func dsp:DSP 20000000 ; make sure we allocate enough memory

  (let ((audio_file_path "/usr/local/Cellar/extempore/HEAD/share/extempore/assets/02 Escape Burn.wav")
        ;; get number of channels/frames in file
        (nchan (convert (sf_channels_from_file audio_file_path)))
        (nframes (sf_frames_from_file audio_file_path))
        (nsamp (* nchan nframes))
        ;; allocate memory buffer for audio samples
        (audio_data:SAMPLE* (zalloc nsamp))
        ;; read audio samples into buffer
        (samples_read (sf_read_file_into_buffer audio_file_path audio_data 0 nframes #t))
        ;; markers for keeping track of playback position
        (playhead 0)
        (i 0)
        (F (stft_st_c 64 512 512))
        (left:SComplex* (F.left))
        (right:SComplex* (F.right)))
    (if (< samples_read 0)
        (printf "Error reading audio file.\n"))

    (lambda (in time chan dat)
      
      ;; increment playhead (this is the most basic playback possible
      ;; - it's not channel aware, it just steps through the buffer
      ;; one sample at a time)
      (set! playhead (modulo (+ playhead 1) nframes))

      ;; play audio
    
      (F chan (* 2.0 (pref audio_data playhead))))))

;; now set the dsp closure to start the audio
(dsp:set! dsp)



;; make mover closure
(bind-func make-mover
	(lambda ()
		(let ((location:vec (zalloc 2))
					(velocity:vec (zalloc 2))
					(acceleration:vec (zalloc 2))
					(top_speed:float (rand_range 2. 10.)))

					(vec2_set location (rand_max width) (rand_max height))
					(vec2_set velocity 0. 0.)
					
		(lambda (fft_val:float)
			;;get acceleration from mouse pos
			(let ((mouse_pos:vec (zalloc 2)))
				(vec2_set mouse_pos (mouse_x) (mouse_y))
				(vec2_dec mouse_pos location)
				(vec2_normalize mouse_pos)
				(vec2_scale mouse_pos 0.2)
				(vec2_set acceleration (vec2_get_x mouse_pos) (vec2_get_y mouse_pos)))

			;;update position and velocity
			(vec2_inc velocity acceleration)
			(vec2_limit velocity top_speed)
			(vec2_inc location velocity)

			;;check bounds. wrap around
			(if (> (vec2_get_x location) width) 
				(vec2_set_x location 0.))

			(if (< (vec2_get_x location) 0.) 
				(vec2_set_x location width))

			(if (> (vec2_get_y location) height) 
				(vec2_set_y location 0.))

			(if (< (vec2_get_y location) 0.) 
				(vec2_set_y location height))

			;;display mover
			(stroke 0.0 0.0 1. 1.)
			(stroke_width (* fft_val 4.0))
			(fill 1.0 0.5 0.0 fft_val)
			(circle (vec2_get_x location) (vec2_get_y location) (* fft_val 24.0))))))


;; setup variables
(bind-val movers |200,[void,float]*|)

(bind-func init_movers
	(lambda ()
		(doloop (i 200)
			(aset! movers i (make-mover)))))

(init_movers)


;; draw loop
(bind-func draw
	 (let ((dl:Complexf* (dsp.left))
         (dr:Complexf* (dsp.right)))
    (lambda ()
    	;(background 1.0 1.0 1.0)
    	(stroke 0.0 0.0 0.0 0.0)
    	(fill 1.0 1.0 1.0 0.1)
    	(rectangle 0. 0. width height)
				(doloop (i 200)
			   	((aref movers i) (Complex_mag (pref dr i)))
			   	))))
			