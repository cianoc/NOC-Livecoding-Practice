;// The Nature of Code
;// Daniel Shiffman
;// Draft book
;
;// Example 1-3: Vector subtraction
;; Ported to Extempore by Jason Levine

;; setup window dims

(bind-val width float 1024.)
(bind-val height float 768.)

(sys:load "The-Nature-of-Livecoding/processing.xtm")
(sys:load "libs/external/sndfile.xtm")
(sys:load "libs/external/audio_dsp_ext.xtm")

(bind-func dsp:DSP 20000000 ; make sure we allocate enough memory

  (let ((audio_file_path "/usr/local/Cellar/extempore/HEAD/share/extempore/assets/02 Escape Burn.wav")
        ;; get number of channels/frames in file
        (nchan (convert (sf_channels_from_file audio_file_path)))
        (nframes (sf_frames_from_file audio_file_path))
        (nsamp (* nchan nframes))
        ;; allocate memory buffer for audio samples
        (audio_data:SAMPLE* (zalloc nsamp))
        ;; read audio samples into buffer
        (samples_read (sf_read_file_into_buffer audio_file_path audio_data 0 nframes #t))
        ;; markers for keeping track of playback position
        (playhead 0)
        (i 0)
        (F (stft_st_c 64 512 512))
        (left:SComplex* (F.left))
        (right:SComplex* (F.right)))
    (if (< samples_read 0)
        (printf "Error reading audio file.\n"))

    (lambda (in time chan dat)
      
      ;; increment playhead (this is the most basic playback possible
      ;; - it's not channel aware, it just steps through the buffer
      ;; one sample at a time)
      (set! playhead (modulo (+ playhead 1) nframes))

      ;; play audio
      (cond ((= chan 0) 
      				(F chan (* 2.0 (pref audio_data playhead))))
      			((= chan 1) 
      				(F chan (* 2.0 (pref audio_data (+ playhead nframes))))))


      )))

;; now set the dsp closure to start the audio
(dsp:set! dsp)


;; setup variables
(bind-val mouse_pos vec 2)
(bind-val center vec 2)
(bind-val band_pos vec 2)

(call-as-xtlang (vec2_set center (/ width 2.) (/ height 2.)))
;; draw loop
(bind-func draw
    (let ((dl:Complexf* (dsp.left))
         (dr:Complexf* (dsp.right)))
    (lambda ()
    	(background 1.0 1.0 1.0)

        (let ((i:float 0.0) (incr (/ height 200.)))
            (dotimes (i 200.0)
                (vec2_set mouse_pos (mouse_x) (mouse_y))
                (vec2_set band_pos width (convert (* incr i)) )
                (vec2_dec mouse_pos band_pos)


                (nvgResetTransform vg)
                (translate width (convert  (* (- 200. i) incr)  ))
                (stroke_width 2.0)
                (stroke 0. 0. 0. 0.5)
                (let ((length:float (Complex_mag (pref dr (ftoi64 i)))))
                   (vec2_scale mouse_pos length)
                   (stroke_width (* length 2.)))
                (line 0. 0. (vec2_get_x mouse_pos) (vec2_get_y mouse_pos))


                (vec2_set mouse_pos (mouse_x) (mouse_y))
                (vec2_set band_pos 0.0 (convert (* incr i)) )
                (vec2_dec mouse_pos band_pos)


                (nvgResetTransform vg)
              	(translate 0. (convert (* (- 200. i) incr)  ) )
              	(stroke_width 1.)
                (stroke 0. 0. 0. 0.5)
                (let ((length:float (Complex_mag (pref dl (ftoi64 i)))))
                   (vec2_scale mouse_pos length)
                   (stroke_width (* length 2.)))
              	(line 0. 0. (vec2_get_x mouse_pos) (vec2_get_y mouse_pos)))))))


(bind-func draw
    (let ((dl:Complexf* (dsp.left))
         (dr:Complexf* (dsp.right)))
    (lambda ()
      (background 1.0 1.0 1.0)

        (let ((i:float 0.0) (incr (/ height 200.)))
            (dotimes (i 200.0)
                (vec2_set mouse_pos (mouse_x) (mouse_y))
                (vec2_set band_pos width (convert (* incr i)) )
                (vec2_dec mouse_pos band_pos)


                (nvgResetTransform vg)
                (translate width (convert  i  ))
                (stroke_width 1.0)
                (stroke 0. 0. 0. 0.5)
                (let ((length:float (Complex_mag (pref dr (ftoi64 i)))))
                   (vec2_scale mouse_pos length)
                   ;(stroke_width (* length 2.))
                   )
                (line 0. 0. (vec2_get_x mouse_pos) (vec2_get_y mouse_pos))


                (vec2_set mouse_pos (mouse_x) (mouse_y))
                (vec2_set band_pos 0.0 (convert (* incr i)) )
                (vec2_dec mouse_pos band_pos)


                (nvgResetTransform vg)
                (translate 0. (convert  i  ) )
                (stroke_width 1.)
                (stroke 0. 0. 0. 0.5)
                (let ((length:float (Complex_mag (pref dl (ftoi64 i)))))
                   (vec2_scale mouse_pos length)
                   ;(stroke_width (* length 2.))
                   )
                (line 0. 0. (vec2_get_x mouse_pos) (vec2_get_y mouse_pos)))))))

(bind-func draw
    (let ((dl:Complexf* (dsp.left))
         (dr:Complexf* (dsp.right)))
    (lambda ()
      (background 1.0 1.0 1.0)

        (let ((i:float 0.0) (incr (/ height 200.)))
            (dotimes (i 200.0)
                (vec2_set mouse_pos (mouse_x) (mouse_y))
                (vec2_set band_pos width (convert (* incr i)) )
                (vec2_dec mouse_pos band_pos)


                (nvgResetTransform vg)
                (translate width (convert (* i incr)))
                (stroke_width 1.0)
                (stroke 0. 0. 0. 0.5)
                (let ((length:float (Complex_mag (pref dr (ftoi64 i)))))
                   (stroke 0. 0. 0. length))
                (line 0. 0. (vec2_get_x mouse_pos) (vec2_get_y mouse_pos))


                (vec2_set mouse_pos (mouse_x) (mouse_y))
                (vec2_set band_pos 0.0 (convert (* incr i)) )
                (vec2_dec mouse_pos band_pos)


                (nvgResetTransform vg)
                (translate 0. (convert (* i incr)))
                (stroke_width 1.)
                (stroke 0. 0. 0. 0.5)
                (let ((length:float (Complex_mag (pref dl (ftoi64 i)))))
                   (stroke 0. 0. 0. length))
                (line 0. 0. (vec2_get_x mouse_pos) (vec2_get_y mouse_pos)))))))
