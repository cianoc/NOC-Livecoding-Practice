


;; Mover data type: location, velocity, accleration, mass 
(bind-type Mover <float*,float*,float*,float>)

;; Constructor for the 2-dimensional case
(bind-func Mover_2D:[Mover*,float,float,float,float,float,float,float]*
  (lambda (location_x location_y velocity_x velocity_y accel_x accel_y mass)
    (let
        ((location (zalloc 2))
         (velocity (zalloc 2))
         (accel (zalloc 2)))
      (pfill! location location_x location_y)
      (pfill! velocity velocity_x velocity_y)
      (pfill! accel accel_x accel_y)
      (Mover location velocity accel mass))))

;; Overload the default constructor
(bind-poly Mover Mover_2D)

;; Now create an instance with particular initial values
(bind-func apply_force
  (lambda (m:Mover* force:vec)
      (vec2_div force (tref m 3))
      (vec2_inc (tref m 2) force)))

(bind-func update
  (lambda (m:Mover*)
      (vec2_inc (tref m 1) (tref m 2))
      (vec2_inc (tref m 0) (tref m 1))
      (vec2_scale (tref m 2) 0.)))

(bind-func display
  (lambda (m:Mover*)
    (stroke 0. 0. 0. 1.)
    (stroke_width 2.)
    (fill 0.5 0.5 0.5 1.0)
    (circle (vec2_get_x (tref m 0)) (vec2_get_y (tref m 0)) 48.)))

(bind-func check_edges
  (lambda (m:Mover*)
    (if (or (> (vec2_get_x (tref m 0)) width) (< (vec2_get_x (tref m 0)) 0.0))
      (begin
        (vec2_set_x (tref m 1) (* (vec2_get_x (tref m 1)) -1.0))
        (xtm_play_note (now) drums (midi2frq (convert 13)) 0.7 44100 0 dargs)))

    (if (> (vec2_get_y (tref m 0)) height)
      (begin
        (vec2_set_y (tref m 0) height)
        (vec2_set_y (tref m 1) (* (vec2_get_y (tref m 1)) -1.0))
        (xtm_play_note (now) drums (midi2frq (convert 10)) 1.0 44100 0 dargs)))

    void))

(bind-func height_to_pitch
  (lambda (m:Mover* min:float max:float)
    (+ min (* (- 1.0 (/ (vec2_get_y (tref m 0)) height)) (- max min)))))






