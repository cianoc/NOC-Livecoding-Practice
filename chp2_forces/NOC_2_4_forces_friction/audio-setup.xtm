;;sound setup
(sys:load "libs/external/instruments_ext.xtm")
(define-sampler piano sampler_note_hermite_c sampler_fx) 
(define piano-regex "^.*([ABCDEFG][#b]?[0-9])v([0-9]+)\.wav$")

(define parse-salamander-piano
  (lambda (file-list)
    (map (lambda (fname)
           (let ((result (regex:matched fname piano-regex)))
             (if (null? result)
                 #f
                 ;; load 4th velocity layer only
                 (if (= (string->number (caddr result)) 4)
                     (list fname
                           (note-name-to-midi-number (cadr result))
                           0
                           0)
                     #f))))
         file-list)))

(load-sampler
  piano
  ;; Can't use a variable here; need the actual path string
  "/Users/jasonlevine/Code/extempore/assets/salamander/SalamanderGrandPianoV3_44.1khz16bit/44.1khz16bit"
  ;; 'sound bank' index
  0
  parse-salamander-piano)


;;load a mini drum sampler
(define sample-path "/Users/jasonlevine/Code/extempore/assets/")
(define drum-path (string-append sample-path "salamander/OH/"))
(define-sampler drums sampler_note_hermite_c sampler_fx)

(define drum-sample-data
  (list
    (list "kick_OH_F_9.wav" 10)
    (list "hihatClosed_OH_F_20.wav" 11)
    (list "hihatOpen_OH_FF_6.wav" 12)
    (list "snareStick_OH_F_1.wav" 13)))

(define add-drum-sample
  (lambda (file-name const-name)
    (set-sampler-index drums
                       (string-append drum-path file-name)
                       const-name
                       0 0 0 1)))

(define add-drum-samples
  (lambda (data)
    (map (lambda (sample-pair)
           (add-drum-sample (car sample-pair) (cadr sample-pair)))
         data)))

(add-drum-samples drum-sample-data)

(bind-func dsp:[SAMPLE,SAMPLE,i64,i64,SAMPLE*]*
    (lambda (in:SAMPLE time:i64 chan:i64 dat:SAMPLE*)
      (cond ((< chan 2)
                (+ (piano in time chan dat)
                  (drums in time chan dat))
            (else 0.0))))

(dsp:set! dsp)

;;note functions

;;setup and initialize vars
(bind-val scale |7,i8|)
(xtmX (afill! scale 0:i8 2:i8 3:i8 5:i8 7:i8 9:i8 10:i8))

;;note function. should be elsewhere.
(bind-func get_note
  (lambda (degree:i8 octave:i8)
    (if (< degree 7)
      (+ (* octave 12) (aref scale degree))
      (get_note (- degree 7) (+ octave 1)))))

